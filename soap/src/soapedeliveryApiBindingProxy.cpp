/* soapedeliveryApiBindingProxy.cpp
   Generated by gSOAP 2.8.3 from delivery2Service.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapedeliveryApiBindingProxy.h"

edeliveryApiBindingProxy::edeliveryApiBindingProxy()
{	edeliveryApiBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

edeliveryApiBindingProxy::edeliveryApiBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

edeliveryApiBindingProxy::edeliveryApiBindingProxy(const char *url)
{	edeliveryApiBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

edeliveryApiBindingProxy::edeliveryApiBindingProxy(soap_mode iomode)
{	edeliveryApiBindingProxy_init(iomode, iomode);
}

edeliveryApiBindingProxy::edeliveryApiBindingProxy(const char *url, soap_mode iomode)
{	edeliveryApiBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

edeliveryApiBindingProxy::edeliveryApiBindingProxy(soap_mode imode, soap_mode omode)
{	edeliveryApiBindingProxy_init(imode, omode);
}

edeliveryApiBindingProxy::~edeliveryApiBindingProxy()
{ }

void edeliveryApiBindingProxy::edeliveryApiBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://edelivery2.localhost/ws/edeliveryApi/1.0/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void edeliveryApiBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void edeliveryApiBindingProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *edeliveryApiBindingProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *edeliveryApiBindingProxy::soap_fault()
{	return this->fault;
}

const char *edeliveryApiBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *edeliveryApiBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int edeliveryApiBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void edeliveryApiBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void edeliveryApiBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *edeliveryApiBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int edeliveryApiBindingProxy::getDataForBku(const char *endpoint, const char *soap_action, std::string _org_USCOREkd, std::string _keterangan, time_t _timestamp, struct ns1__getDataForBkuResponse &_param_1)
{	struct soap *soap = this;
	struct ns1__getDataForBku soap_tmp_ns1__getDataForBku;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://edelivery2.localhost/app_dev.php/ws/edeliveryApi/1.0";
	if (!soap_action)
		soap_action = "http://edelivery2.localhost/ws/edeliveryApi/1.0/getDataForBku";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getDataForBku._org_USCOREkd = _org_USCOREkd;
	soap_tmp_ns1__getDataForBku._keterangan = _keterangan;
	soap_tmp_ns1__getDataForBku._timestamp = _timestamp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDataForBku(soap, &soap_tmp_ns1__getDataForBku);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDataForBku(soap, &soap_tmp_ns1__getDataForBku, "ns1:getDataForBku", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDataForBku(soap, &soap_tmp_ns1__getDataForBku, "ns1:getDataForBku", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns1__getDataForBkuResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getDataForBkuResponse(soap, &_param_1, "ns1:getDataForBkuResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int edeliveryApiBindingProxy::setSppConfirmation(const char *endpoint, const char *soap_action, std::string _xml_USCOREparams, struct ns1__setSppConfirmationResponse &_param_2)
{	struct soap *soap = this;
	struct ns1__setSppConfirmation soap_tmp_ns1__setSppConfirmation;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://edelivery2.localhost/app_dev.php/ws/edeliveryApi/1.0";
	if (!soap_action)
		soap_action = "http://edelivery2.localhost/ws/edeliveryApi/1.0/setSppConfirmation";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__setSppConfirmation._xml_USCOREparams = _xml_USCOREparams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__setSppConfirmation(soap, &soap_tmp_ns1__setSppConfirmation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__setSppConfirmation(soap, &soap_tmp_ns1__setSppConfirmation, "ns1:setSppConfirmation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__setSppConfirmation(soap, &soap_tmp_ns1__setSppConfirmation, "ns1:setSppConfirmation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns1__setSppConfirmationResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__setSppConfirmationResponse(soap, &_param_2, "ns1:setSppConfirmationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int edeliveryApiBindingProxy::getDataForPengadaan(const char *endpoint, const char *soap_action, std::string _unit_USCOREid, time_t _timestamp, struct ns1__getDataForPengadaanResponse &_param_3)
{	struct soap *soap = this;
	struct ns1__getDataForPengadaan soap_tmp_ns1__getDataForPengadaan;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://edelivery2.localhost/app_dev.php/ws/edeliveryApi/1.0";
	if (!soap_action)
		soap_action = "http://edelivery2.localhost/ws/edeliveryApi/1.0/getDataForPengadaan";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getDataForPengadaan._unit_USCOREid = _unit_USCOREid;
	soap_tmp_ns1__getDataForPengadaan._timestamp = _timestamp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDataForPengadaan(soap, &soap_tmp_ns1__getDataForPengadaan);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDataForPengadaan(soap, &soap_tmp_ns1__getDataForPengadaan, "ns1:getDataForPengadaan", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDataForPengadaan(soap, &soap_tmp_ns1__getDataForPengadaan, "ns1:getDataForPengadaan", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_ns1__getDataForPengadaanResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getDataForPengadaanResponse(soap, &_param_3, "ns1:getDataForPengadaanResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int edeliveryApiBindingProxy::getApprovedSppAction(const char *endpoint, const char *soap_action, std::string _no_USCOREspp, struct ns1__getApprovedSppActionResponse &_param_4)
{	struct soap *soap = this;
	struct ns1__getApprovedSppAction soap_tmp_ns1__getApprovedSppAction;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://edelivery2.localhost/app_dev.php/ws/edeliveryApi/1.0";
	if (!soap_action)
		soap_action = "http://edelivery2.localhost/ws/edeliveryApi/1.0/getApprovedSppAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getApprovedSppAction._no_USCOREspp = _no_USCOREspp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getApprovedSppAction(soap, &soap_tmp_ns1__getApprovedSppAction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getApprovedSppAction(soap, &soap_tmp_ns1__getApprovedSppAction, "ns1:getApprovedSppAction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getApprovedSppAction(soap, &soap_tmp_ns1__getApprovedSppAction, "ns1:getApprovedSppAction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_ns1__getApprovedSppActionResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getApprovedSppActionResponse(soap, &_param_4, "ns1:getApprovedSppActionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
