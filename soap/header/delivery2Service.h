/* delivery2Service.h
   Generated by wsdl2h 2.8.3 from http://edelivery2.localhost/app_dev.php/ws/edeliveryApi/1.0?wsdl and typemap.dat
   2012-04-11 11:09:53 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on delivery2Service.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://edelivery2.localhost/ws/edeliveryApi/1.0/                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	edeliveryApiBinding 
//gsoap ns1  service type:	edeliveryApiPortType 
//gsoap ns1  service port:	http://edelivery2.localhost/app_dev.php/ws/edeliveryApi/1.0 
//gsoap ns1  service namespace:	http://edelivery2.localhost/ws/edeliveryApi/1.0/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage edeliveryApi Definitions

@section edeliveryApi_bindings Service Bindings

  - @ref edeliveryApiBinding

@section edeliveryApi_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page edeliveryApiBinding Binding "edeliveryApiBinding"

@section edeliveryApiBinding_operations Operations of Binding  "edeliveryApiBinding"

  - @ref ns1__getDataForBku

  - @ref ns1__setSppConfirmation

  - @ref ns1__getDataForPengadaan

  - @ref ns1__getApprovedSppAction

@section edeliveryApiBinding_ports Endpoints of Binding  "edeliveryApiBinding"

  - http://edelivery2.localhost/app_dev.php/ws/edeliveryApi/1.0

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   edeliveryApiBinding                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDataForBku                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDataForBkuResponse" of service binding "edeliveryApiBinding" operation "ns1__getDataForBku"
struct ns1__getDataForBkuResponse
{
    std::string                         _return_;
};

/// Operation "ns1__getDataForBku" of service binding "edeliveryApiBinding"

/**

Operation details:


  - SOAP RPC literal messaging

  - SOAP action="http://edelivery2.localhost/ws/edeliveryApi/1.0/getDataForBku"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDataForBku(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         org_USCOREkd,
    std::string                         keterangan,
    time_t                              timestamp,
    // response parameters:
    struct ns1__getDataForBkuResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDataForBku(
    struct soap *soap,
    // request parameters:
    std::string                         org_USCOREkd,
    std::string                         keterangan,
    time_t                              timestamp,
    // response parameters:
    struct ns1__getDataForBkuResponse&
  );
@endcode

C++ proxy class (defined in soapedeliveryApiBindingProxy.h):
@code
  class edeliveryApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapedeliveryApiBindingService.h):
@code
  class edeliveryApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDataForBku rpc
//gsoap ns1  service method-encoding:	getDataForBku literal
//gsoap ns1  service method-action:	getDataForBku http://edelivery2.localhost/ws/edeliveryApi/1.0/getDataForBku
int ns1__getDataForBku(
    std::string                         _org_USCOREkd,	///< Request parameter
    std::string                         _keterangan,	///< Request parameter
    time_t                              _timestamp,	///< Request parameter
    struct ns1__getDataForBkuResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__setSppConfirmation                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__setSppConfirmationResponse" of service binding "edeliveryApiBinding" operation "ns1__setSppConfirmation"
struct ns1__setSppConfirmationResponse
{
    bool                                _return_;
};

/// Operation "ns1__setSppConfirmation" of service binding "edeliveryApiBinding"

/**

Operation details:


  - SOAP RPC literal messaging

  - SOAP action="http://edelivery2.localhost/ws/edeliveryApi/1.0/setSppConfirmation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__setSppConfirmation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         xml_USCOREparams,
    // response parameters:
    struct ns1__setSppConfirmationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__setSppConfirmation(
    struct soap *soap,
    // request parameters:
    std::string                         xml_USCOREparams,
    // response parameters:
    struct ns1__setSppConfirmationResponse&
  );
@endcode

C++ proxy class (defined in soapedeliveryApiBindingProxy.h):
@code
  class edeliveryApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapedeliveryApiBindingService.h):
@code
  class edeliveryApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	setSppConfirmation rpc
//gsoap ns1  service method-encoding:	setSppConfirmation literal
//gsoap ns1  service method-action:	setSppConfirmation http://edelivery2.localhost/ws/edeliveryApi/1.0/setSppConfirmation
int ns1__setSppConfirmation(
    std::string                         _xml_USCOREparams,	///< Request parameter
    struct ns1__setSppConfirmationResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDataForPengadaan                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDataForPengadaanResponse" of service binding "edeliveryApiBinding" operation "ns1__getDataForPengadaan"
struct ns1__getDataForPengadaanResponse
{
    std::string                         _return_;
};

/// Operation "ns1__getDataForPengadaan" of service binding "edeliveryApiBinding"

/**

Operation details:


  - SOAP RPC literal messaging

  - SOAP action="http://edelivery2.localhost/ws/edeliveryApi/1.0/getDataForPengadaan"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDataForPengadaan(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         unit_USCOREid,
    time_t                              timestamp,
    // response parameters:
    struct ns1__getDataForPengadaanResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDataForPengadaan(
    struct soap *soap,
    // request parameters:
    std::string                         unit_USCOREid,
    time_t                              timestamp,
    // response parameters:
    struct ns1__getDataForPengadaanResponse&
  );
@endcode

C++ proxy class (defined in soapedeliveryApiBindingProxy.h):
@code
  class edeliveryApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapedeliveryApiBindingService.h):
@code
  class edeliveryApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDataForPengadaan rpc
//gsoap ns1  service method-encoding:	getDataForPengadaan literal
//gsoap ns1  service method-action:	getDataForPengadaan http://edelivery2.localhost/ws/edeliveryApi/1.0/getDataForPengadaan
int ns1__getDataForPengadaan(
    std::string                         _unit_USCOREid,	///< Request parameter
    time_t                              _timestamp,	///< Request parameter
    struct ns1__getDataForPengadaanResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getApprovedSppAction                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getApprovedSppActionResponse" of service binding "edeliveryApiBinding" operation "ns1__getApprovedSppAction"
struct ns1__getApprovedSppActionResponse
{
    std::string                         _return_;
};

/// Operation "ns1__getApprovedSppAction" of service binding "edeliveryApiBinding"

/**

Operation details:


  - SOAP RPC literal messaging

  - SOAP action="http://edelivery2.localhost/ws/edeliveryApi/1.0/getApprovedSppAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getApprovedSppAction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         no_USCOREspp,
    // response parameters:
    struct ns1__getApprovedSppActionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getApprovedSppAction(
    struct soap *soap,
    // request parameters:
    std::string                         no_USCOREspp,
    // response parameters:
    struct ns1__getApprovedSppActionResponse&
  );
@endcode

C++ proxy class (defined in soapedeliveryApiBindingProxy.h):
@code
  class edeliveryApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapedeliveryApiBindingService.h):
@code
  class edeliveryApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getApprovedSppAction rpc
//gsoap ns1  service method-encoding:	getApprovedSppAction literal
//gsoap ns1  service method-action:	getApprovedSppAction http://edelivery2.localhost/ws/edeliveryApi/1.0/getApprovedSppAction
int ns1__getApprovedSppAction(
    std::string                         _no_USCOREspp,	///< Request parameter
    struct ns1__getApprovedSppActionResponse&	///< Response struct parameter
);

/* End of delivery2Service.h */
